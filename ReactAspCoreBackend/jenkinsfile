pipeline {
    agent any

    environment {
        ASPNET_CORE_PATH = 'ReactAspCoreBackend'
        REACT_PATH = 'aspcore-frontend'
        SONAR_TOKEN = 'squ_e013a641d578b4a25a4eaa395f4e73075dec0dd2' // Replace with your SonarQube token
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    try {
                        checkout([$class: 'GitSCM',
                            userRemoteConfigs: [[url: 'https://github.com/SWEETY1Y/Demo.demo.git']],
                            branches: [[name: '*/main']]
                        ])
                        echo 'Successfully checked out the code.'
                    } catch (Exception e) {
                        echo "Failed to checkout code: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error("Checkout failed")
                    }
                }
            }
        }

        stage('Restore') {
            steps {
                script {
                    dir(ASPNET_CORE_PATH) {
                        if (fileExists('*.csproj')) {
                            echo 'Restoring ASP.NET Core dependencies...'
                            sh 'dotnet restore'
                        } else {
                            echo 'No ASP.NET Core project file found. Please check the project structure.'
                        }
                    }

                    dir(REACT_PATH) {
                        if (fileExists('package.json')) {
                            echo 'Restoring React dependencies...'
                            sh 'npm install'
                        } else {
                            echo 'No React package.json file found.'
                        }
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    dir(ASPNET_CORE_PATH) {
                        if (fileExists('*.csproj')) {
                            echo 'Building ASP.NET Core application...'
                            sh 'dotnet build --configuration Release'
                        } else {
                            echo 'No ASP.NET Core project file found.'
                        }
                    }

                    dir(REACT_PATH) {
                        if (fileExists('package.json')) {
                            echo 'Building React application...'
                            sh 'npm run build'
                        } else {
                            echo 'No React package.json file found.'
                        }
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    dir(ASPNET_CORE_PATH) {
                        if (fileExists('*.csproj')) {
                            echo 'Running ASP.NET Core tests...'
                            sh 'dotnet test --configuration Release'
                        } else {
                            echo 'No ASP.NET Core project file found.'
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'SonarScanner for .NET'
                    withSonarQubeEnv('SonarQube') {
                        sh """
                            dotnet ${scannerHome}/SonarScanner.MSBuild.dll begin /k:"Sonar-jenkins" /d:sonar.login="${SONAR_TOKEN}"
                        """
                        sh 'dotnet build'
                        sh """
                            dotnet ${scannerHome}/SonarScanner.MSBuild.dll end /d:sonar.login="${SONAR_TOKEN}"
                        """
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    def qualityGate = waitForQualityGate()
                    if (qualityGate.status != 'OK') {
                        error "Quality Gate failed: ${qualityGate.status}"
                    }
                    echo 'Quality Gate passed!'
                }
            }
        }

        stage('Publish') {
            steps {
                script {
                    dir(ASPNET_CORE_PATH) {
                        echo 'Publishing ASP.NET Core application...'
                        sh 'dotnet publish --configuration Release --output ./publish'
                    }
                }
            }
        }

        stage('Archive') {
            steps {
                script {
                    archiveArtifacts artifacts: "${ASPNET_CORE_PATH}/publish/**/*", allowEmptyArchive: true
                    archiveArtifacts artifacts: "${REACT_PATH}/build/**/*", allowEmptyArchive: true
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo 'Deploying applications...'
                    // Add deployment commands here
                }
            }
        }
    }

    post {
        success {
            echo 'Build and deployment successful!'
        }
        failure {
            echo 'Build or deployment failed.'
        }
        always {
            cleanWs()
        }
    }
}
